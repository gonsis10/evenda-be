// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GroupRole {
  MEMBER
  ADMIN
  OWNER
}

enum GroupVisibility {
  PUBLIC
  PRIVATE
  INVITE_ONLY
}

model User {
  id             String              @id @default(uuid())
  email          String              @unique
  firstName      String
  lastName       String
  createdGroups  Group[]             @relation("GroupCreator")
  groupMembers   GroupMember[]
  createdEvents  Event[]             @relation("EventCreator")
  eventAttendees EventAttendee[]
  invitations    GroupInvitation[]   @relation("InvitedBy")
  eventImages    EventImage[]        @relation("UploadedBy")
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}

model Group {
  id            String               @id @default(uuid())
  name          String
  description   String?
  visibility    GroupVisibility      @default(PUBLIC)
  createdById   String
  createdBy     User                 @relation("GroupCreator", fields: [createdById], references: [id])
  createdAt     DateTime             @default(now())
  members       GroupMember[]
  events        Event[]
  invitations   GroupInvitation[]
}

model GroupMember {
  userId   String
  groupId  String
  role     GroupRole     @default(MEMBER)
  joinedAt DateTime      @default(now())

  user     User          @relation(fields: [userId], references: [id])
  group    Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([userId, groupId])
}

model Event {
  id            String               @id @default(uuid())
  groupId       String
  title         String
  description   String?
  location      String?
  startTime     DateTime
  endTime       DateTime?
  createdById   String
  createdAt     DateTime             @default(now())

  group         Group                @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdBy     User                 @relation("EventCreator", fields: [createdById], references: [id])
  attendees     EventAttendee[]
  images        EventImage[]
}

model EventAttendee {
  userId     String
  eventId    String
  status     String       @default("going")
  rsvpTime   DateTime     @default(now())

  user       User         @relation(fields: [userId], references: [id])
  event      Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([userId, eventId])
}

model GroupInvitation {
  id            String    @id @default(uuid())
  groupId       String
  invitedEmail  String
  invitedById   String
  status        String    @default("pending")
  createdAt     DateTime  @default(now())

  group         Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  invitedBy     User      @relation("InvitedBy", fields: [invitedById], references: [id])
}

model EventImage {
  id           String   @id @default(uuid())
  eventId      String
  imageUrl     String
  uploadedById String
  uploadedAt   DateTime @default(now())

  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  uploadedBy   User     @relation("UploadedBy", fields: [uploadedById], references: [id])
}
